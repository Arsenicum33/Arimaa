package cz.cvut.fel.pjv.Controllers.InputControllers.MouseControllers;

import cz.cvut.fel.pjv.Controllers.InputControllers.MouseControllers.MouseListenerAll;
import cz.cvut.fel.pjv.Controllers.MessageControllers.IPublisher;
import cz.cvut.fel.pjv.Controllers.MessageControllers.MessageType;
import cz.cvut.fel.pjv.Models.BoardField;
import cz.cvut.fel.pjv.Models.BoardModel;
import cz.cvut.fel.pjv.Models.MoveInfo;
import cz.cvut.fel.pjv.Models.Piece;
import cz.cvut.fel.pjv.utils.*;

import java.awt.event.MouseEvent;

/**
 * BoardMouseListener observes all events on the board generated by user
 * Publishes information about users input for further processing
 */
public class BoardMouseListener implements MouseListenerAll, IPublisher
{
    private final IPublisher publisher;
    private BoardField currentField;
    private BoardField forceMoveField;
    private final BoardModel board;
    private int gripOffsetX, gripOffsetY;
    private int initialPosX, initialPosY;
    public BoardMouseListener(BoardModel boardModel, IPublisher publisher)
    {
        this.board = boardModel;
        this.publisher = publisher;
    }
    @Override
    public void mouseClicked(MouseEvent e)
    {
        BoardField clickedField = getHoveredField(e);
        if (forceMoveField == clickedField)
        {
            forceMoveField.unchoose();
            forceMoveField = null;
        }
        else
        {
            if (forceMoveField!=null)
                forceMoveField.unchoose();
            forceMoveField = clickedField;
            clickedField.choose();
        }

    }

    @Override
    public void mousePressed(MouseEvent e)
    {
        int mousePosX = e.getX();
        int mousePosY = e.getY();
        int fieldIndex = getFieldIndex(mousePosX, mousePosY);
        BoardField field = board.getField(fieldIndex);
        if (!field.hasPiece())
            return;
        currentField = field;
        Piece currentPiece = new Piece(field.getPiece());
        gripOffsetX = mousePosX-currentPiece.getWindowPosX();
        gripOffsetY = mousePosY-currentPiece.getWindowPosY();
        initialPosX=currentPiece.getWindowPosX();
        initialPosY=currentPiece.getWindowPosY();
    }

    @Override
    public void mouseReleased(MouseEvent e)
    {
        if (currentField==null)
            return;
        int endFieldIndex = getFieldIndex(e.getX(), e.getY());
        BoardField endField = board.getField(endFieldIndex);
        if (endField==currentField)
        {
            currentField.getPiece().setWindowPos(initialPosX,initialPosY);
            publish(MessageType.PieceDragged, null);
            return;
        }

        publish(MessageType.PieceMoved, new MoveInfo(currentField, endField, forceMoveField));
        currentField=null;
        if (forceMoveField!=null)
        {
            forceMoveField.unchoose();
            forceMoveField=null;
        }



    }

    @Override
    public void mouseEntered(MouseEvent e)
    {

    }

    @Override
    public void mouseExited(MouseEvent e)
    {
        if (currentField==null)
            return;
        currentField.getPiece().setWindowPos(initialPosX, initialPosY);
        publish(MessageType.PieceDragged, null);
        currentField=null;
    }

    private int getFieldIndex(int posX, int posY)
    {
        posX/= Constants.SQUARE_SIZE;
        posY/=Constants.SQUARE_SIZE;
        return posX+posY*Constants.BOARD_SIZE;
    }


    @Override
    public void publish(MessageType type, Object data)
    {
        if (publisher!=null)
            publisher.publish(type,data);
    }

    @Override
    public void mouseDragged(MouseEvent e)
    {
        if (currentField==null)
            return;
        currentField.getPiece().setWindowPos(e.getX()-gripOffsetX, e.getY()-gripOffsetY);
        publish(MessageType.PieceDragged, null);
    }

    @Override
    public void mouseMoved(MouseEvent e)
    {
    }

    private BoardField getHoveredField(MouseEvent e)
    {
        int mousePosX = e.getX();
        int mousePosY = e.getY();
        int fieldIndex = getFieldIndex(mousePosX, mousePosY);
        return board.getField(fieldIndex);
    }

}
